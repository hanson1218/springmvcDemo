<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	<display-name>Archetype Created Web Application</display-name>

	<!-- 配置 Spring -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring.xml</param-value>
	</context-param>

	<!-- spring框架的入口，启动spring框架,为项目提供了spring支持，初始化了Ioc容器 
	ContextLoaderListener是一个监听器，其实现了ServletContextListener接口，
	其用来监听Servlet，当tomcat启动时会初始化一个Servlet容器，这样ContextLoaderListener会监听到Servlet的初始化，
	这样在Servlet初始化之后我们就可以在ContextLoaderListener中也进行一些初始化操作。看下面的ServletContextListener的源码也是比较简单的，
	ContextLoaderListener实现了ServletContextListener接口，所以会有两个方法contextInitialized和contextDestroyed。
	web容器（tomcat服务）初始化时会调用方法contextInitialized，web容器销毁时会调用方法contextDestroyed。  利用观察者模式-->
	<listener>
		<description>spring监听器</description>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
	</listener>
	
	
	<context-param>
   		<param-name>key</param-name>
   		<param-value>value123</param-value>
	</context-param>
	<listener> 
   		<listener-class>com.snow.www.listener.ContextListenerTest1</listener-class>
	</listener>
	<listener> 
   		<listener-class>com.snow.www.listener.ContextListenerTest2</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<!--listener 配置-->

	<!-- 配置springmvc -->
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- kaptcha -->
	<servlet>
    	<servlet-name>Kaptcha</servlet-name>
    	<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
    	<init-param>
            <description>验证码长度 5</description>
            <param-name>kaptcha.textproducer.char.length</param-name>
            <param-value>2</param-value>
        </init-param>
	</servlet>
	<servlet-mapping>
   	 	<servlet-name>Kaptcha</servlet-name>
   	 	<url-pattern>/kaptcha.jpg</url-pattern>
	</servlet-mapping>

	<!--过滤器配置-->
	<filter> 
		<filter-name>characterEncoding</filter-name> 
		<filter-class>com.snow.www.filter.WebCharacterEncodingFilter</filter-class> 
		<init-param> 
			<param-name>encoding</param-name> 
			<param-value>UTF-8</param-value> 
		</init-param> 
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value> <!-- 强制进行编码 -->
		</init-param>
		<init-param>
			<param-name>exclude</param-name><!-- 不进行强制编码的路径 -->
			<param-value>/nofilter</param-value>
		</init-param>
	</filter> 
	<filter-mapping>
		<filter-name>characterEncoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping> 
	<filter>
		<filter-name>testFilter</filter-name>
		<filter-class>com.snow.www.filter.TestFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>testFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--过滤器配置-->
</web-app>
